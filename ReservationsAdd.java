package GUI;

import DB.Database;
import DB.JavaDataBase;
import HotelRelated.Reservacion;
import Nonhotel.Host;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.desktop.SystemSleepEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author DOOMSLAYER
 */
public class ReservationsAdd extends javax.swing.JFrame implements Database {

    /**
     * Creates new form ReservationsAdd
     */
    public ReservationsAdd() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setTitle("Reservaciones");
        LabelName = new javax.swing.JLabel();
        NameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReservationTable = new javax.swing.JTable();
        CancelButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        ActualiazeButton = new javax.swing.JButton();
        CheckOutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        LabelName.setText("Nombre de Reservacion");

        ReservationTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "ReservacionNum", "Nombre", "NumInvitados", "Cuarto", "Check-in", "Check-out"
                }
        ));
        jScrollPane1.setViewportView(ReservationTable);

        CancelButton.setText("Cancelar");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        AddButton.setBackground(new java.awt.Color(153, 153, 255));
        AddButton.setText("AÃ±adir Invitado");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Buscar");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ActualiazeButton.setText("Actualizar");
        ActualiazeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualiazeButtonActionPerformed(evt);
            }
        });

        CheckOutButton.setText("Check Out");
        CheckOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jScrollPane1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(LabelName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(SearchButton)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addComponent(jSeparator1)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ActualiazeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckOutButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddButton)
                                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(LabelName)
                                        .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SearchButton))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(CancelButton)
                                        .addComponent(AddButton)
                                        .addComponent(ActualiazeButton)
                                        .addComponent(CheckOutButton))
                                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if(NameTextField.getText().isEmpty())
            JOptionPane.showMessageDialog(null, "Se necesita un nombre", "Nombre invalido", JOptionPane.WARNING_MESSAGE);
        else {
            try {
                DefaultTableModel dm = (DefaultTableModel) ReservationTable.getModel();
                dm.getDataVector().removeAllElements();
                dm.fireTableDataChanged();
                Connection connection = JavaDataBase.getConnection();
                String name = NameTextField.getText();
                DatabaseSearch(connection, name, ReservationTable);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        try {
            int index = ReservationTable.getSelectedRow();
            TableModel model = ReservationTable.getModel();
            String ReservationId = model.getValueAt(index, 0).toString();
            String numberguests =  model.getValueAt(index, 2).toString();
            int guestsnumberadd = Integer.valueOf(numberguests);
            if(guestsnumberadd == 0)
            {
                JOptionPane.showMessageDialog(null, "No se pueden agregar mas huespedes a esta reservacion", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
            else {
                String RoomNumber = model.getValueAt(index, 3).toString();
                String entry = model.getValueAt(index, 4).toString();
                String exit = model.getValueAt(index, 5).toString();
                LocalDate entrydate = LocalDate.parse(entry);
                LocalDate exitdate = LocalDate.parse(exit);
                int RM = Integer.valueOf(RoomNumber);
                int RID = Integer.valueOf(ReservationId);
                if(JavaDataBase.getcapacityAvailable(RID) == 0)
                    JOptionPane.showMessageDialog(null, "No se pueden agregar mas huespedes a esta reservacion", "Advertencia", JOptionPane.WARNING_MESSAGE);
                else {
                    Host host = new Host(null, null, RM, RID, entrydate, exitdate);
                    new GuestAdd(host);
                    dispose();
                }
            }
        }
        catch (IndexOutOfBoundsException indexOutOfBoundsException)
        {
            JOptionPane.showMessageDialog(null, "Ninguna reservacion seleccionada", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        MainMenu mainMenu = new MainMenu();
        mainMenu.setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }

    private void CheckOutButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            int index = ReservationTable.getSelectedRow();
            TableModel model = ReservationTable.getModel();
            String ReservationId = model.getValueAt(index, 0).toString();
            int RID = Integer.valueOf(ReservationId);
            Connection connection = JavaDataBase.getConnection();
            JavaDataBase.CheckOutReservation(connection, RID);
            JavaDataBase.ResetRoom(connection, RID);
            JOptionPane.showMessageDialog(null, "Reservacion Terminada");
            ReservationTable.repaint();
        }
        catch (IndexOutOfBoundsException exception)
        {

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ActualiazeButtonActionPerformed(java.awt.event.ActionEvent evt) {

        // TODO add your handling code here:
        try {
            int index = ReservationTable.getSelectedRow();
            TableModel model = ReservationTable.getModel();
            String ReservationId = model.getValueAt(index, 0).toString();
            String ReservationName = model.getValueAt(index, 1).toString();
            String guests = model.getValueAt(index, 2).toString();
            String RoomNumber = model.getValueAt(index, 3 ).toString();
            String entry = model.getValueAt(index, 4).toString();
            String exit = model.getValueAt(index, 5).toString();
            LocalDate entrydate = LocalDate.parse(entry);
            LocalDate exitdate = LocalDate.parse(exit);
            int RM = Integer.valueOf(RoomNumber);
            int RID = Integer.valueOf(ReservationId);
            int guestnum = Integer.valueOf(guests);
            Reservacion reservacion = new Reservacion(ReservationName, RM, RID, guestnum ,entrydate, exitdate);
            new ReservationModify(reservacion);
        }
        catch (IndexOutOfBoundsException indexOutOfBoundsException)
        {
            JOptionPane.showMessageDialog(null, "Ninguna reservacion seleccionada", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservationsAdd().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton ActualiazeButton;
    private javax.swing.JButton AddButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton CheckOutButton;
    private javax.swing.JLabel LabelName;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JTable ReservationTable;
    private javax.swing.JButton SearchButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;

    private static final String getReservation = "SELECT ReservationID, ReservationName, Invitados, RoomNumber, EntryDate, ExitDate from Reservations where ReservationName = ? and ActiveStatus = true";

    @Override
    public void DatabaseSearch(Connection connection, String string, JTable table) {

        try {
            PreparedStatement statement = connection.prepareStatement( getReservation);
            statement.setString(1, string);
            ResultSet rs = statement.executeQuery();
            while(rs.next())
            {
                String ReservationID = String.valueOf(rs.getInt(1));
                String ReservationName = rs.getString(2);
                String Invitados = String.valueOf(rs.getInt(3));
                String RoomNumber = String.valueOf(rs.getInt(4));
                String Entrydate = String.valueOf(rs.getDate(5));
                String Exitdate = String.valueOf(rs.getDate(6));

                String tbData[] = {ReservationID, ReservationName, Invitados, RoomNumber, Entrydate, Exitdate};
                DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
                tblModel.addRow(tbData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    // End of variables declaration
}
